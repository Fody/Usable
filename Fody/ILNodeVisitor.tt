<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
	var nodeTypes = new string[] { 
		"Block",
		"BasicBlock",
		"Label",
		"TryCatchBlock",
		"Expression",
		"WhileLoop",
		"Condition",
		"Switch",
		"FixedStatement",
	};
#>
using System;
using ICSharpCode.Decompiler.ILAst;

public abstract class ILNodeVisitor
{
    protected ILNodeVisitor()
    {
    }

	public virtual ILNode Visit(ILNode node)
    {
		if (node == null)
            return node;

<# foreach (var type in nodeTypes) { #>
		var <#= ToCamelName(type) #> = node as IL<#= type #>;
		if (<#= ToCamelName(type) #> != null)
			return Visit<#= type #>(<#= ToCamelName(type) #>);

<# } #>
		throw new NotSupportedException();
	}

<# foreach (var type in nodeTypes) { #>
	protected virtual IL<#= type #> Visit<#= type #>(IL<#= type #> <#= ToCamelName(type) #>)
	{
		foreach (var child in <#= ToCamelName(type) #>.GetChildren())
            Visit(child);
        return <#= ToCamelName(type) #>;
	}

<# } #>
}
<#+
	private string ToCamelName(string name)
	{
		var newName = Char.ToLower(name[0]) + name.Substring(1);

		if (newName == "switch")
			return "switchStatement";

		return newName;
	}
#>